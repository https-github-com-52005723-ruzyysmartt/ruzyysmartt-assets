{"addr": "0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe", "network": "mainnet", "ver": "26 Apr 2019", "problems": {"0x173825d9": "removeOwner(address _owner)", "0x7065cb48": "addOwner(address _owner)"}, "stor_defs": [["def", "m_required", 0, ["mask", 256, 0]], ["def", "m_numOwners", 1, ["mask", 256, 0]], ["def", "stor2", 2, ["array", "struct"]], ["def", "stor258", 258, ["mapping", 256]], ["def", "stor259", 259, ["mapping", "struct"]], ["def", "stor260", 260, ["array", 256]], ["def", "m_dailyLimit", 261, ["mask", 256, 0]], ["def", "stor262", 262, ["mask", 256, 0]], ["def", "stor263", 263, ["mask", 256, 0]], ["def", "stor264", 264, ["mapping", "struct"]]], "functions": [{"hash": "0x2f54bf6e", "name": "isOwner(address _owner)", "color_name": "isOwner(address \u001b[32m_owner\u001b[0m)", "abi_name": "isOwner(address)", "length": [2, 171], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0misOwner(address \u001b[32m_owner\u001b[0m)\u001b[95m payable\u001b[0m: \n  return (\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m > \u001b[0m0)", "trace": [["return", ["gt", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_owner"]], ["loc", 258]]], 0]]], "params": {"4": ["address", "_owner"]}}, {"hash": "0x4123cb6b", "name": "m_numOwners()", "color_name": "m_numOwners()", "abi_name": "m_numOwners()", "length": [2, 75], "getter": ["storage", 256, 0, 1], "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mm_numOwners()\u001b[95m payable\u001b[0m: \n  return \u001b[32mm_numOwners\u001b[0m", "trace": [["return", ["stor", 256, 0, ["name", "m_numOwners", 1]]]], "params": {}}, {"hash": "0x5c52c2f5", "name": "resetSpentToday()", "color_name": "resetSpentToday()", "abi_name": "resetSpentToday()", "length": [76, 6575], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mresetSpentToday()\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n              stop\n          else:\n              \u001b[38;5;8mlog Confirmation(\u001b[0m\n              \u001b[38;5;8m      address owner=caller,\u001b[0m\n              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                  stop\n              else:\n                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                  \u001b[32mstor262\u001b[0m = 0\n                  stop\n      else:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      \u001b[32mstor262\u001b[0m = 0\n                      stop\n          else:\n              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                  \u001b[32mcontinue \u001b[0m\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      \u001b[32mstor262\u001b[0m = 0\n                      stop\n  else:\n      stop", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["loc", 262], 0], ["stop"]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["loc", 262], 0], ["stop"]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id8147", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8147", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["loc", 262], 0], ["stop"]]]]]]]]]]]]]], [["stop"]]]], "params": {}}, {"hash": "0x746c9171", "name": "m_required()", "color_name": "m_required()", "abi_name": "m_required()", "length": [2, 73], "getter": ["storage", 256, 0, 0], "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mm_required()\u001b[95m payable\u001b[0m: \n  return \u001b[32mm_required\u001b[0m", "trace": [["return", ["stor", 256, 0, ["name", "m_required", 0]]]], "params": {}}, {"hash": "0x797af627", "name": "confirm(bytes32 _h)", "color_name": "confirm(bytes32 \u001b[32m_h\u001b[0m)", "abi_name": "confirm(bytes32)", "length": [379, 35162], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mconfirm(bytes32 \u001b[32m_h\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n              return 0\n          else:\n              \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = \u001b[32m_h\u001b[0m\n              \u001b[38;5;8mlog Confirmation(\u001b[0m\n              \u001b[38;5;8m      address owner=caller,\u001b[0m\n              \u001b[38;5;8m      bytes32 operation=_h)\u001b[0m\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                  return 0\n              else:\n                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                  if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                      return 0\n                  else:\n                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                          call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                             value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                               gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                              \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                              \u001b[38;5;8m                  caller,\u001b[0m\n                              \u001b[38;5;8m                  _h,\u001b[0m\n                              \u001b[38;5;8m                  stor264[_h].field_256,\u001b[0m\n                              \u001b[38;5;8m                  addr(stor264[_h].field_0),\u001b[0m\n                              \u001b[38;5;8m                  160,\u001b[0m\n                              \u001b[38;5;8m                  stor264[_h].field_512,\u001b[0m\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              return 1\n                          else:\n                              \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                              \u001b[94midx\u001b[0m = 288\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=_h,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=stor264[_h].field_256,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(stor264[_h].field_0),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=stor264[_h].field_512, data=mem[288 len stor264[_h].field_512 + (floor32(stor264[_h].field_512 - 1) + -stor264[_h].field_512 + 32 % 32)]))\u001b[0m\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              return 1\n                      else:\n                          \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                          \u001b[94midx\u001b[0m = 96\n                          \u001b[94ms\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                          call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                             value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                               gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                              args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                              \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                              \u001b[38;5;8m                  caller,\u001b[0m\n                              \u001b[38;5;8m                  _h,\u001b[0m\n                              \u001b[38;5;8m                  stor264[_h].field_256,\u001b[0m\n                              \u001b[38;5;8m                  addr(stor264[_h].field_0),\u001b[0m\n                              \u001b[38;5;8m                  160,\u001b[0m\n                              \u001b[38;5;8m                  stor264[_h].field_512,\u001b[0m\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              return 1\n                          else:\n                              \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                              \u001b[94midx\u001b[0m = 288\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=_h,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=stor264[_h].field_256,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(stor264[_h].field_0),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=stor264[_h].field_512, data=mem[288 len stor264[_h].field_512 + (floor32(stor264[_h].field_512 - 1) + -stor264[_h].field_512 + 32 % 32)]))\u001b[0m\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              return 1\n      else:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = \u001b[32m_h\u001b[0m\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  return 0\n              else:\n                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = \u001b[32m_h\u001b[0m\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=_h)\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      return 0\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                          return 0\n                      else:\n                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                  \u001b[38;5;8m                  _h,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m                  addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m                  160,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_512,\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n                              else:\n                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                  \u001b[94midx\u001b[0m = 288\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=_h,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=stor264[_h].field_512, data=mem[288 len stor264[_h].field_512 + (floor32(stor264[_h].field_512 - 1) + -stor264[_h].field_512 + 32 % 32)]))\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n                          else:\n                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                              \u001b[94midx\u001b[0m = 96\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                  \u001b[38;5;8m                  _h,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m                  addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m                  160,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_512,\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n                              else:\n                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                  \u001b[94midx\u001b[0m = 288\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=_h,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=stor264[_h].field_512, data=mem[288 len stor264[_h].field_512 + (floor32(stor264[_h].field_512 - 1) + -stor264[_h].field_512 + 32 % 32)]))\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n          else:\n              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                  \u001b[32mcontinue \u001b[0m\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = \u001b[32m_h\u001b[0m\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  return 0\n              else:\n                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = \u001b[32m_h\u001b[0m\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=_h)\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      return 0\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                          return 0\n                      else:\n                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                  \u001b[38;5;8m                  _h,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m                  addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m                  160,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_512,\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n                              else:\n                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                  \u001b[94midx\u001b[0m = 288\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=_h,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=stor264[_h].field_512, data=mem[288 len stor264[_h].field_512 + (floor32(stor264[_h].field_512 - 1) + -stor264[_h].field_512 + 32 % 32)]))\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n                          else:\n                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                              \u001b[94midx\u001b[0m = 96\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                  \u001b[38;5;8m                  _h,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m                  addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m                  160,\u001b[0m\n                                  \u001b[38;5;8m                  stor264[_h].field_512,\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n                              else:\n                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                  \u001b[94midx\u001b[0m = 288\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=_h,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=stor264[_h].field_256,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(stor264[_h].field_0),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=stor264[_h].field_512, data=mem[288 len stor264[_h].field_512 + (floor32(stor264[_h].field_512 - 1) + -stor264[_h].field_512 + 32 % 32)]))\u001b[0m\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_h\u001b[0m\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  return 1\n  else:\n      return 0", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 259]]]]]], [["return", 0]], [["setmem", ["range", 128, 32], ["param", "_h"]], ["log", ["data", "caller", ["param", "_h"]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 259]]]]], ["return", 0]], [["if", ["ge", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]]], [["return", 0]], [["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id6736", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id6736", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id4984", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id4984", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["log", ["data", "caller", ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id6736", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id6736", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]]]]]]]]]]]]]], [["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["param", "_h"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["param", "_h"]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 259]]]]]], [["return", 0]], [["setmem", ["range", 128, 32], ["param", "_h"]], ["log", ["data", "caller", ["param", "_h"]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 259]]]]], ["return", 0]], [["if", ["ge", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]]], [["return", 0]], [["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id6736", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id6736", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id4984", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id4984", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["log", ["data", "caller", ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id6736", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id6736", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]]]]]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id7147", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id7147", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["param", "_h"]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 259]]]]]], [["return", 0]], [["setmem", ["range", 128, 32], ["param", "_h"]], ["log", ["data", "caller", ["param", "_h"]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["param", "_h"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 259]]]]], ["return", 0]], [["if", ["ge", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]]], [["return", 0]], [["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id6736", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id6736", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id4984", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id4984", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], [["log", ["data", "caller", ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["param", "_h"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["param", "_h"], ["loc", 264]]]]], ["continue", "id6736", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id6736", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["param", "_h"], ["stor", 256, 256, ["map", ["param", "_h"], ["loc", 264]]], ["stor", 160, 0, ["map", ["param", "_h"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["param", "_h"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["param", "_h"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["param", "_h"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["param", "_h"], ["loc", 264]]], 0], ["continue", "id8261", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8261", [["setvar", 0, 0]]], ["return", 1]]]]]]]]]]]]]]]]]]]], [["return", 0]]]], "params": {"4": ["bytes32", "_h"]}}, {"hash": "0xb20d30a9", "name": "setDailyLimit(uint256 _newLimit)", "color_name": "setDailyLimit(uint256 \u001b[32m_newLimit\u001b[0m)", "abi_name": "setDailyLimit(uint256)", "length": [76, 6665], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0msetDailyLimit(uint256 \u001b[32m_newLimit\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n              stop\n          else:\n              \u001b[38;5;8mlog Confirmation(\u001b[0m\n              \u001b[38;5;8m      address owner=caller,\u001b[0m\n              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                  stop\n              else:\n                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                  \u001b[32mm_dailyLimit\u001b[0m = \u001b[32m_newLimit\u001b[0m\n                  stop\n      else:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      \u001b[32mm_dailyLimit\u001b[0m = \u001b[32m_newLimit\u001b[0m\n                      stop\n          else:\n              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                  \u001b[32mcontinue \u001b[0m\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      \u001b[32mm_dailyLimit\u001b[0m = \u001b[32m_newLimit\u001b[0m\n                      stop\n  else:\n      stop", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["name", "m_dailyLimit", 261], ["param", "_newLimit"]], ["stop"]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["name", "m_dailyLimit", 261], ["param", "_newLimit"]], ["stop"]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id9238", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id9238", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["name", "m_dailyLimit", 261], ["param", "_newLimit"]], ["stop"]]]]]]]]]]]]]], [["stop"]]]], "params": {"4": ["uint256", "_newLimit"]}}, {"hash": "0xb61d27f6", "name": "execute(address _to, uint256 _value, bytes _data)", "color_name": "execute(address \u001b[32m_to\u001b[0m, uint256 \u001b[32m_value\u001b[0m, bytes \u001b[32m_data\u001b[0m)", "abi_name": "execute(address,uint256,bytes)", "length": [3840, 479225], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mexecute(address \u001b[32m_to\u001b[0m, uint256 \u001b[32m_value\u001b[0m, bytes \u001b[32m_data\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m <= \u001b[0m0:\n      return 0\n  else:\n      if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m <= \u001b[0m0:\n          \u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0mcalldata.size\u001b[95m]\u001b[0m = call.data[0 len calldata.size]\n          \u001b[95mmem[\u001b[0mcalldata.size + 96\u001b[95m]\u001b[0m = block.number\n          if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n                  if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                          return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                          if not \u001b[32m_data.length\u001b[0m:\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                              return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                      \u001b[38;5;8mlog Confirmation(\u001b[0m\n                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                              if not \u001b[32m_data.length\u001b[0m:\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                          \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                          if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                  if not \u001b[32m_data.length\u001b[0m:\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                      \u001b[38;5;8m                  160,\u001b[0m\n                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                      \u001b[94midx\u001b[0m = 288\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                  \u001b[94midx\u001b[0m = 96\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                      args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                      \u001b[38;5;8m                  160,\u001b[0m\n                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                      \u001b[94midx\u001b[0m = 288\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n              else:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n                  if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                      if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                              if not \u001b[32m_data.length\u001b[0m:\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                          \u001b[38;5;8mlog Confirmation(\u001b[0m\n                          \u001b[38;5;8m      address owner=caller,\u001b[0m\n                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                          if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                  if not \u001b[32m_data.length\u001b[0m:\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                      call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                         value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                           gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                          \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                          \u001b[38;5;8m                  caller,\u001b[0m\n                                          \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m                  160,\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                          \u001b[94midx\u001b[0m = 288\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                          \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                      \u001b[94midx\u001b[0m = 96\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                         value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                           gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                          args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                          \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                          \u001b[38;5;8m                  caller,\u001b[0m\n                                          \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m                  160,\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                          \u001b[94midx\u001b[0m = 288\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                          \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n                      \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                          \u001b[32mcontinue \u001b[0m\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                      if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                              if not \u001b[32m_data.length\u001b[0m:\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                          \u001b[38;5;8mlog Confirmation(\u001b[0m\n                          \u001b[38;5;8m      address owner=caller,\u001b[0m\n                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                          if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                  if not \u001b[32m_data.length\u001b[0m:\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                      call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                         value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                           gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                          \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                          \u001b[38;5;8m                  caller,\u001b[0m\n                                          \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m                  160,\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                          \u001b[94midx\u001b[0m = 288\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                          \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                      \u001b[94midx\u001b[0m = 96\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                         value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                           gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                          args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                          \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                          \u001b[38;5;8m                  caller,\u001b[0m\n                                          \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m                  160,\u001b[0m\n                                          \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                          \u001b[94midx\u001b[0m = 288\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                          \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n          else:\n              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                  return sha3(call.data[0 len calldata.size], block.number)\n              else:\n                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                  if not \u001b[32m_data.length\u001b[0m:\n                      \u001b[94midx\u001b[0m = 0\n                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                          \u001b[32mcontinue \u001b[0m\n                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                      return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      \u001b[94ms\u001b[0m = 0\n                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                          \u001b[32mcontinue \u001b[0m\n                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                          \u001b[32mcontinue \u001b[0m\n                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                      return sha3(call.data[0 len calldata.size], block.number)\n      else:\n          if block.timestamp\u001b[1m / \u001b[0m24\u001b[1m * \u001b[0m3600\u001b[1m <= \u001b[0m\u001b[32mstor263\u001b[0m:\n              if \u001b[32m_value\u001b[0m + \u001b[32mstor262\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor262\u001b[0m:\n                  \u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0mcalldata.size\u001b[95m]\u001b[0m = call.data[0 len calldata.size]\n                  \u001b[95mmem[\u001b[0mcalldata.size + 96\u001b[95m]\u001b[0m = block.number\n                  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n                          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                  if not \u001b[32m_data.length\u001b[0m:\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                              \u001b[38;5;8mlog Confirmation(\u001b[0m\n                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                          call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                             value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                               gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                              \u001b[38;5;8m                  caller,\u001b[0m\n                                              \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m                  160,\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 288\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                          \u001b[94midx\u001b[0m = 96\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                             value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                               gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                              \u001b[38;5;8m                  caller,\u001b[0m\n                                              \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m                  160,\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 288\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n                          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 96\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 96\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                          return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                          if not \u001b[32m_data.length\u001b[0m:\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                              return sha3(call.data[0 len calldata.size], block.number)\n              else:\n                  if \u001b[32m_value\u001b[0m + \u001b[32mstor262\u001b[0m\u001b[1m > \u001b[0m\u001b[32mm_dailyLimit\u001b[0m:\n                      \u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0mcalldata.size\u001b[95m]\u001b[0m = call.data[0 len calldata.size]\n                      \u001b[95mmem[\u001b[0mcalldata.size + 96\u001b[95m]\u001b[0m = block.number\n                      if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n                          if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n                              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 96\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n                              if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                      \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                          \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                                  if not \u001b[32m_data.length\u001b[0m:\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 96\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                      args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                      \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                          \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                                  if not \u001b[32m_data.length\u001b[0m:\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 96\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                      args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                              if not \u001b[32m_data.length\u001b[0m:\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      \u001b[32mstor262\u001b[0m += \u001b[32m_value\u001b[0m\n                      \u001b[38;5;8mlog SingleTransact(\u001b[0m\n                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                      call \u001b[32m_to\u001b[0m with:\n                         value \u001b[32m_value\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                           gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                          args \u001b[32m_data[\u001b[0mall\u001b[32m]\u001b[0m\n                      return 0\n          else:\n              \u001b[32mstor262\u001b[0m = 0\n              \u001b[32mstor263\u001b[0m = block.timestamp\u001b[1m / \u001b[0m24\u001b[1m * \u001b[0m3600\n              if \u001b[32m_value\u001b[0m + \u001b[32mstor262\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor262\u001b[0m:\n                  \u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0mcalldata.size\u001b[95m]\u001b[0m = call.data[0 len calldata.size]\n                  \u001b[95mmem[\u001b[0mcalldata.size + 96\u001b[95m]\u001b[0m = block.number\n                  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n                          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                  if not \u001b[32m_data.length\u001b[0m:\n                                      \u001b[94midx\u001b[0m = 0\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[94ms\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                          \u001b[32mcontinue \u001b[0m\n                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                              \u001b[38;5;8mlog Confirmation(\u001b[0m\n                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                          call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                             value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                               gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                              \u001b[38;5;8m                  caller,\u001b[0m\n                                              \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m                  160,\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 288\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                          \u001b[94midx\u001b[0m = 96\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                              \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                             value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                               gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                              \u001b[38;5;8m                  caller,\u001b[0m\n                                              \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m                  160,\u001b[0m\n                                              \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 288\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                              \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n                          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 96\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 96\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                          return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                          if not \u001b[32m_data.length\u001b[0m:\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[94ms\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                              return sha3(call.data[0 len calldata.size], block.number)\n              else:\n                  if \u001b[32m_value\u001b[0m + \u001b[32mstor262\u001b[0m\u001b[1m > \u001b[0m\u001b[32mm_dailyLimit\u001b[0m:\n                      \u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0mcalldata.size\u001b[95m]\u001b[0m = call.data[0 len calldata.size]\n                      \u001b[95mmem[\u001b[0mcalldata.size + 96\u001b[95m]\u001b[0m = block.number\n                      if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n                          if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n                              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                  if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                      return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                      if not \u001b[32m_data.length\u001b[0m:\n                                          \u001b[94midx\u001b[0m = 0\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[94ms\u001b[0m = 0\n                                          \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                          \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                          \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                              \u001b[32mcontinue \u001b[0m\n                                          \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                          \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                          \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                          \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                          \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                          \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                              \u001b[94midx\u001b[0m = 96\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                  \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                 value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                   gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                  \u001b[38;5;8m                  caller,\u001b[0m\n                                                  \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m                  160,\u001b[0m\n                                                  \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 288\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n                              if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                      \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                          \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                                  if not \u001b[32m_data.length\u001b[0m:\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 96\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                      args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                  if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                                      if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                          return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                          if not \u001b[32m_data.length\u001b[0m:\n                                              \u001b[94midx\u001b[0m = 0\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[94ms\u001b[0m = 0\n                                              \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                              \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                              \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                  \u001b[32mcontinue \u001b[0m\n                                              \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                              \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                              \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                              \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                              \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                  else:\n                                      \u001b[95mmem[\u001b[0m128\u001b[95m]\u001b[0m = sha3(call.data[0 len calldata.size], block.number)\n                                      \u001b[38;5;8mlog Confirmation(\u001b[0m\n                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number))\u001b[0m\n                                      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                              if not \u001b[32m_data.length\u001b[0m:\n                                                  \u001b[94midx\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                      else:\n                                          require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                          \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                          if not \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                              if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                                                  return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                                                  if not \u001b[32m_data.length\u001b[0m:\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                                      \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                          else:\n                                              if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                              else:\n                                                  \u001b[95mmem[\u001b[0m96\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                  \u001b[94midx\u001b[0m = 96\n                                                  \u001b[94ms\u001b[0m = 0\n                                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 96\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                      \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                      \u001b[32mcontinue \u001b[0m\n                                                  call \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m.\u001b[95mmem[\u001b[0m96\u001b[95m len \u001b[0m4\u001b[95m]\u001b[0m with:\n                                                     value \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                                                       gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                                                      args \u001b[95mmem[\u001b[0m100\u001b[95m len \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + (floor32(\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m - 1) + -\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 32\u001b[1m % \u001b[0m32) - 4\u001b[95m]\u001b[0m\n                                                  if not \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m:\n                                                      \u001b[38;5;8mlog MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data):\u001b[0m\n                                                      \u001b[38;5;8m                  caller,\u001b[0m\n                                                      \u001b[38;5;8m                  sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m                  addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m                  160,\u001b[0m\n                                                      \u001b[38;5;8m                  stor264[call.data[0 len calldata.size]][block.number].field_512,\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                                                  else:\n                                                      \u001b[95mmem[\u001b[0m288\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\n                                                      \u001b[94midx\u001b[0m = 288\n                                                      \u001b[94ms\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 288\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m + 32\u001b[32m:\u001b[0m\n                                                          \u001b[95mmem[\u001b[0m\u001b[94midx\u001b[0m + 32\u001b[95m]\u001b[0m = \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                                          \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      \u001b[38;5;8mlog MultiTransact(\u001b[0m\n                                                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                                                      \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                                      \u001b[38;5;8m      uint256 value=stor264[call.data[0 len calldata.size]][block.number].field_256,\u001b[0m\n                                                      \u001b[38;5;8m      address to=addr(stor264[call.data[0 len calldata.size]][block.number].field_0),\u001b[0m\n                                                      \u001b[38;5;8m      bytes data=Array(len=stor264[call.data[0 len calldata.size]][block.number].field_512, data=mem[288 len stor264[call.data[0 len calldata.size]][block.number].field_512 + (floor32(stor264[call.data[0 len calldata.size]][block.number].field_512 - 1) + -stor264[call.data[0 len calldata.size]][block.number].field_512 + 32 % 32)]))\u001b[0m\n                                                      \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                                      \u001b[94midx\u001b[0m = 0\n                                                      \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                                          \u001b[32mcontinue \u001b[0m\n                                                      return sha3(call.data[0 len calldata.size], block.number)\n                      else:\n                          if \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m:\n                              return sha3(call.data[0 len calldata.size], block.number)\n                          else:\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32m_to\u001b[0m\u001b[1m or \u001b[0mMask(96, 160, \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m)\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = \u001b[32m_value\u001b[0m\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32m_data.length\u001b[0m\n                              if not \u001b[32m_data.length\u001b[0m:\n                                  \u001b[94midx\u001b[0m = 0\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                              else:\n                                  \u001b[94ms\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[32m_data\u001b[0m + 36\n                                  \u001b[32mwhile \u001b[0m\u001b[32m_data\u001b[0m + \u001b[32m_data.length\u001b[0m + 36\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94ms\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = cd[\u001b[94midx\u001b[0m]\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 32\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94midx\u001b[0m = Mask(251, 0, \u001b[32m_data.length\u001b[0m + 31)\u001b[1m >> \u001b[0m5\n                                  \u001b[32mwhile \u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m][\u001b[0mblock.number\u001b[32m]\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m + 2\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[38;5;8mlog ConfirmationNeeded(\u001b[0m\n                                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size], block.number),\u001b[0m\n                                  \u001b[38;5;8m      address initiator=caller,\u001b[0m\n                                  \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                                  \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                                  \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                                  return sha3(call.data[0 len calldata.size], block.number)\n                  else:\n                      \u001b[32mstor262\u001b[0m += \u001b[32m_value\u001b[0m\n                      \u001b[38;5;8mlog SingleTransact(\u001b[0m\n                      \u001b[38;5;8m      address owner=caller,\u001b[0m\n                      \u001b[38;5;8m      uint256 value=_value,\u001b[0m\n                      \u001b[38;5;8m      address to=addr(_to),\u001b[0m\n                      \u001b[38;5;8m      bytes data=Array(len=_data.length, data=_data[all]))\u001b[0m\n                      call \u001b[32m_to\u001b[0m with:\n                         value \u001b[32m_value\u001b[0m \u001b[38;5;8mwei\u001b[0m\n                           gas gas_remaining - 34050 \u001b[38;5;8mwei\u001b[0m\n                          args \u001b[32m_data[\u001b[0mall\u001b[32m]\u001b[0m\n                      return 0", "trace": [["if", ["le", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]], 0], [["return", 0]], [["if", ["le", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]], 0], [["setmem", ["range", 96, "calldatasize"], ["call.data", 0, "calldatasize"]], ["setmem", ["range", ["add", 96, "calldatasize"], 32], "number"], ["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id5634", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id5634", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]], [["if", ["le", ["div", "timestamp", 86400], ["stor", 256, 0, ["loc", 263]]], [["if", ["lt", ["add", ["param", "_value"], ["stor", 256, 0, ["loc", 262]]], ["stor", 256, 0, ["loc", 262]]], [["setmem", ["range", 96, "calldatasize"], ["call.data", 0, "calldatasize"]], ["setmem", ["range", ["add", 96, "calldatasize"], 32], "number"], ["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id5634", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id5634", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]], [["if", ["gt", ["add", ["param", "_value"], ["stor", 256, 0, ["loc", 262]]], ["stor", 256, 0, ["name", "m_dailyLimit", 261]]], [["setmem", ["range", 96, "calldatasize"], ["call.data", 0, "calldatasize"]], ["setmem", ["range", ["add", 96, "calldatasize"], 32], "number"], ["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id5634", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id5634", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]], [["store", 256, 0, ["loc", 262], ["add", ["param", "_value"], ["stor", 256, 0, ["loc", 262]]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 66394982766435618232867658152507030897783684590884588630247311978543849656324], ["call", ["add", -34050, "gas"], ["param", "_to"], ["param", "_value"], null, ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]], ["return", 0]]]]]], [["store", 256, 0, ["loc", 262], 0], ["store", 256, 0, ["loc", 263], ["div", "timestamp", 86400]], ["if", ["lt", ["add", ["param", "_value"], ["stor", 256, 0, ["loc", 262]]], ["stor", 256, 0, ["loc", 262]]], [["setmem", ["range", 96, "calldatasize"], ["call.data", 0, "calldatasize"]], ["setmem", ["range", ["add", 96, "calldatasize"], 32], "number"], ["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id5634", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id5634", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]], [["if", ["gt", ["add", ["param", "_value"], ["stor", 256, 0, ["loc", 262]]], ["stor", 256, 0, ["name", "m_dailyLimit", 261]]], [["setmem", ["range", 96, "calldatasize"], ["call.data", 0, "calldatasize"]], ["setmem", ["range", ["add", 96, "calldatasize"], 32], "number"], ["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id5634", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id5634", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["setmem", ["range", 128, 32], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]]], ["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 259]], 0], ["if", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]], [["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], null, null], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]], [["setmem", ["range", 96, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 96, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id1621", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id1621", [["setvar", 0, 96], ["setvar", 1, 0]]], ["call", ["add", -34050, "gas"], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 96, 4]], ["mem", ["range", 100, ["add", -4, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]], ["if", ["iszero", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], [["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 160, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["setmem", ["range", 288, 32], ["stor", 256, 0, ["array", 2, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["while", ["gt", ["add", 288, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]], ["add", 32, ["var", 0]]], [["setmem", ["range", ["add", 32, ["var", 0]], 32], ["stor", 256, 256, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["continue", "id0177", [["setvar", 0, ["add", 32, ["var", 0]]], ["setvar", 1, ["add", 1, ["var", 1]]]]]], "id0177", [["setvar", 0, 288], ["setvar", 1, 0]]], ["log", ["data", "caller", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["arr", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mem", ["range", 288, ["add", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["mask_shl", 5, 0, 0, ["add", 32, ["mask_shl", 251, 5, 0, ["add", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["mul", -1, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]]]]]]], 104840009922644790029975526037389993509369754986508760881991515303744284703562], ["store", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], 0], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id6566", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id6566", [["setvar", 0, 0]]], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]]]]]]]]]]]]]], [["if", ["iszero", ["iszero", ["stor", 160, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], [["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["or", ["param", "_to"], ["mask_shl", 96, 160, 0, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["param", "_value"]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]], ["cd", ["add", 4, ["param", "_data"]]]], ["if", ["iszero", ["cd", ["add", 4, ["param", "_data"]]]], [["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, 0]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]], [["while", ["gt", ["add", 36, ["param", "_data"], ["cd", ["add", 4, ["param", "_data"]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 1]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], ["cd", ["var", 0]]], ["continue", "id9397", [["setvar", 1, ["add", 1, ["var", 1]]], ["setvar", 0, ["add", 32, ["var", 0]]]]]], "id9397", [["setvar", 1, 0], ["setvar", 0, ["add", 36, ["param", "_data"]]]]], ["while", ["gt", ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]]]], ["var", 0]], [["store", 256, 0, ["array", ["add", 2, ["var", 0]], ["map", ["data", ["call.data", 0, "calldatasize"], "number"], ["loc", 264]]], 0], ["continue", "id8583", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8583", [["setvar", 0, ["mask_shl", 251, 0, -5, ["add", 31, ["cd", ["add", 4, ["param", "_data"]]]]]]]], ["log", ["data", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]], "caller", ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 10494710657701391614058256079229004705945422801119018179705983306063822176050], ["return", ["sha3", ["data", ["call.data", 0, "calldatasize"], "number"]]]]]]]]]], [["store", 256, 0, ["loc", 262], ["add", ["param", "_value"], ["stor", 256, 0, ["loc", 262]]]], ["log", ["data", ["mask_shl", 160, 0, 96, "caller"], ["param", "_value"], ["mask_shl", 160, 0, 96, ["param", "_to"]], ["arr", ["cd", ["add", 4, ["param", "_data"]]], ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]]], 66394982766435618232867658152507030897783684590884588630247311978543849656324], ["call", ["add", -34050, "gas"], ["param", "_to"], ["param", "_value"], null, ["call.data", ["add", 36, ["param", "_data"]], ["cd", ["add", 4, ["param", "_data"]]]]], ["return", 0]]]]]]]]]]]], "params": {"4": ["address", "_to"], "36": ["uint256", "_value"], "68": ["bytes", "_data"]}}, {"hash": "0xb75c7dc6", "name": "revoke(bytes32 _operation)", "color_name": "revoke(bytes32 \u001b[32m_operation\u001b[0m)", "abi_name": "revoke(bytes32)", "length": [8, 638], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mrevoke(bytes32 \u001b[32m_operation\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_operation\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\u001b[1m > \u001b[0m0:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_operation\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m++\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_operation\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m -= 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\n          \u001b[38;5;8mlog Revoke(\u001b[0m\n          \u001b[38;5;8m      address owner=caller,\u001b[0m\n          \u001b[38;5;8m      bytes32 operation=_operation)\u001b[0m", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["le", ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_operation"], ["loc", 259]]]], 0], [["stop"]], [["store", 256, 0, ["map", ["param", "_operation"], ["loc", 259]], ["add", 1, ["stor", 256, 0, ["map", ["param", "_operation"], ["loc", 259]]]]], ["store", 256, 256, ["map", ["param", "_operation"], ["loc", 259]], ["add", ["stor", 256, 256, ["map", ["param", "_operation"], ["loc", 259]]], ["mul", -1, ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]]]], ["log", ["data", "caller", ["param", "_operation"]], 90454429062363158540474981715595093305774292114971135333614808114705491653451], ["stop"]]]], [["stop"]]]], "params": {"4": ["bytes32", "_operation"]}}, {"hash": "0xba51a6df", "name": "changeRequirement(uint256 _newRequired)", "color_name": "changeRequirement(uint256 \u001b[32m_newRequired\u001b[0m)", "abi_name": "changeRequirement(uint256)", "length": [193, 17832], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mchangeRequirement(uint256 \u001b[32m_newRequired\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n              stop\n          else:\n              \u001b[38;5;8mlog Confirmation(\u001b[0m\n              \u001b[38;5;8m      address owner=caller,\u001b[0m\n              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                  stop\n              else:\n                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                  if \u001b[32m_newRequired\u001b[0m\u001b[1m <= \u001b[0m\u001b[32mm_numOwners\u001b[0m:\n                      \u001b[32mm_required\u001b[0m = \u001b[32m_newRequired\u001b[0m\n                      \u001b[94midx\u001b[0m = 0\n                      \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 264\n                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                          \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                          \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m, 264) + 2\n                          \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2)\n                          \u001b[32mwhile \u001b[0msha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32)\u001b[1m > \u001b[0m\u001b[94ms\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[32mstor[\u001b[0m\u001b[94ms\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                          \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32) + 1\n                          \u001b[32mcontinue \u001b[0m\n                      \u001b[94midx\u001b[0m = 0\n                      \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = 260\n                          if not \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m:\n                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                          else:\n                              require \u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\n                              \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 259\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                      \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m = 0\n                      \u001b[94midx\u001b[0m = code.data[3859 len 32]\n                      \u001b[32mwhile \u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                          \u001b[32mstor[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                          \u001b[32mcontinue \u001b[0m\n                      \u001b[38;5;8mlog RequirementChanged(uint256 newRequirement=_newRequired)\u001b[0m\n                      stop\n                  else:\n                      stop\n      else:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      if \u001b[32m_newRequired\u001b[0m\u001b[1m <= \u001b[0m\u001b[32mm_numOwners\u001b[0m:\n                          \u001b[32mm_required\u001b[0m = \u001b[32m_newRequired\u001b[0m\n                          \u001b[94midx\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 264\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m, 264) + 2\n                              \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2)\n                              \u001b[32mwhile \u001b[0msha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32)\u001b[1m > \u001b[0m\u001b[94ms\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor[\u001b[0m\u001b[94ms\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32) + 1\n                              \u001b[32mcontinue \u001b[0m\n                          \u001b[94midx\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = 260\n                              if not \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m:\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              else:\n                                  require \u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\n                                  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 259\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = code.data[3859 len 32]\n                          \u001b[32mwhile \u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[32mstor[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                          \u001b[38;5;8mlog RequirementChanged(uint256 newRequirement=_newRequired)\u001b[0m\n                          stop\n                      else:\n                          stop\n          else:\n              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                  \u001b[32mcontinue \u001b[0m\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      if \u001b[32m_newRequired\u001b[0m\u001b[1m <= \u001b[0m\u001b[32mm_numOwners\u001b[0m:\n                          \u001b[32mm_required\u001b[0m = \u001b[32m_newRequired\u001b[0m\n                          \u001b[94midx\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 264\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m, 264) + 2\n                              \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2)\n                              \u001b[32mwhile \u001b[0msha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32)\u001b[1m > \u001b[0m\u001b[94ms\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor[\u001b[0m\u001b[94ms\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32) + 1\n                              \u001b[32mcontinue \u001b[0m\n                          \u001b[94midx\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = 260\n                              if not \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m:\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              else:\n                                  require \u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\n                                  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 259\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = code.data[3859 len 32]\n                          \u001b[32mwhile \u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[32mstor[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                          \u001b[38;5;8mlog RequirementChanged(uint256 newRequirement=_newRequired)\u001b[0m\n                          stop\n                      else:\n                          stop\n  else:\n      stop", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["if", ["le", ["param", "_newRequired"], ["stor", 256, 0, ["name", "m_numOwners", 1]]], [["store", 256, 0, ["name", "m_required", 0], ["param", "_newRequired"]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 32, 32], 264], ["store", 160, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["setmem", ["range", 0, 32], ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], 264]]]], ["while", ["gt", ["add", ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]], ["var", 1]], [["store", 256, 0, ["var", 1], 0], ["continue", "id2235", [["setvar", 1, ["add", 1, ["var", 1]]]]]], "id2235", [["setvar", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]]]]], ["continue", "id0640", [["setvar", 1, ["add", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]]]]]], "id0640", [["setvar", 0, 0]]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 0, 32], 260], ["if", ["iszero", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], [["continue", "id9799", [["setvar", 0, ["add", 1, ["var", 0]]]]]], [["if", ["ge", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["setmem", ["range", 0, 32], ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], ["setmem", ["range", 32, 32], 259], ["store", 256, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["continue", "id9799", [["setvar", 0, ["add", 1, ["var", 0]]]]]]]]]], "id9799", [["setvar", 0, 0]]], ["store", 256, 0, ["length", ["loc", 260]], 0], ["while", ["gt", ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["var", 0]], [["store", 256, 0, ["var", 0], 0], ["continue", "id0785", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id0785", [["setvar", 0, ["code.data", 3859, 32]]]], ["log", ["param", "_newRequired"], 78132962338605732318579063710399462434826478310832248676984858981038525075674], ["stop"]], [["stop"]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["if", ["le", ["param", "_newRequired"], ["stor", 256, 0, ["name", "m_numOwners", 1]]], [["store", 256, 0, ["name", "m_required", 0], ["param", "_newRequired"]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 32, 32], 264], ["store", 160, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["setmem", ["range", 0, 32], ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], 264]]]], ["while", ["gt", ["add", ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]], ["var", 1]], [["store", 256, 0, ["var", 1], 0], ["continue", "id2235", [["setvar", 1, ["add", 1, ["var", 1]]]]]], "id2235", [["setvar", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]]]]], ["continue", "id0640", [["setvar", 1, ["add", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]]]]]], "id0640", [["setvar", 0, 0]]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 0, 32], 260], ["if", ["iszero", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], [["continue", "id9799", [["setvar", 0, ["add", 1, ["var", 0]]]]]], [["if", ["ge", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["setmem", ["range", 0, 32], ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], ["setmem", ["range", 32, 32], 259], ["store", 256, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["continue", "id9799", [["setvar", 0, ["add", 1, ["var", 0]]]]]]]]]], "id9799", [["setvar", 0, 0]]], ["store", 256, 0, ["length", ["loc", 260]], 0], ["while", ["gt", ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["var", 0]], [["store", 256, 0, ["var", 0], 0], ["continue", "id0785", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id0785", [["setvar", 0, ["code.data", 3859, 32]]]], ["log", ["param", "_newRequired"], 78132962338605732318579063710399462434826478310832248676984858981038525075674], ["stop"]], [["stop"]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id8073", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id8073", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["if", ["le", ["param", "_newRequired"], ["stor", 256, 0, ["name", "m_numOwners", 1]]], [["store", 256, 0, ["name", "m_required", 0], ["param", "_newRequired"]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 32, 32], 264], ["store", 160, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["setmem", ["range", 0, 32], ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], 264]]]], ["while", ["gt", ["add", ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]], ["var", 1]], [["store", 256, 0, ["var", 1], 0], ["continue", "id2235", [["setvar", 1, ["add", 1, ["var", 1]]]]]], "id2235", [["setvar", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]]]]], ["continue", "id0640", [["setvar", 1, ["add", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]]]]]], "id0640", [["setvar", 0, 0]]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 0, 32], 260], ["if", ["iszero", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], [["continue", "id9799", [["setvar", 0, ["add", 1, ["var", 0]]]]]], [["if", ["ge", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["setmem", ["range", 0, 32], ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], ["setmem", ["range", 32, 32], 259], ["store", 256, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["continue", "id9799", [["setvar", 0, ["add", 1, ["var", 0]]]]]]]]]], "id9799", [["setvar", 0, 0]]], ["store", 256, 0, ["length", ["loc", 260]], 0], ["while", ["gt", ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["var", 0]], [["store", 256, 0, ["var", 0], 0], ["continue", "id0785", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id0785", [["setvar", 0, ["code.data", 3859, 32]]]], ["log", ["param", "_newRequired"], 78132962338605732318579063710399462434826478310832248676984858981038525075674], ["stop"]], [["stop"]]]]]]]]]]]]]]]], [["stop"]]]], "params": {"4": ["uint256", "_newRequired"]}}, {"hash": "0xc2cf7326", "name": "hasConfirmed(bytes32 _operation, address _owner)", "color_name": "hasConfirmed(bytes32 \u001b[32m_operation\u001b[0m, address \u001b[32m_owner\u001b[0m)", "abi_name": "hasConfirmed(bytes32,address)", "length": [8, 454], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mhasConfirmed(bytes32 \u001b[32m_operation\u001b[0m, address \u001b[32m_owner\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m != 0:\n      if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_owner\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_operation\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n          return 1\n      else:\n          return 0\n  else:\n      return 0", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_owner"]], ["loc", 258]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_owner"]], ["loc", 258]]]], ["stor", 256, 256, ["map", ["param", "_operation"], ["loc", 259]]]]]], [["return", 1]], [["return", 0]]]], [["return", 0]]]], "params": {"4": ["bytes32", "_operation"], "36": ["address", "_owner"]}}, {"hash": "0xcbf0b0c0", "name": "kill(address _to)", "color_name": "kill(address \u001b[32m_to\u001b[0m)", "abi_name": "kill(address)", "length": [73, 6579], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mkill(address \u001b[32m_to\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n              stop\n          else:\n              \u001b[38;5;8mlog Confirmation(\u001b[0m\n              \u001b[38;5;8m      address owner=caller,\u001b[0m\n              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                  stop\n              else:\n                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                  \u001b[93mselfdestruct(\u001b[0m\u001b[91m_to\u001b[0m\u001b[93m)\u001b[0m\n      else:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      \u001b[93mselfdestruct(\u001b[0m\u001b[91m_to\u001b[0m\u001b[93m)\u001b[0m\n          else:\n              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                  \u001b[32mcontinue \u001b[0m\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      \u001b[93mselfdestruct(\u001b[0m\u001b[91m_to\u001b[0m\u001b[93m)\u001b[0m\n  else:\n      stop", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["selfdestruct", ["param", "_to"]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["selfdestruct", ["param", "_to"]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id2230", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id2230", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["selfdestruct", ["param", "_to"]]]]]]]]]]]]]]], [["stop"]]]], "params": {"4": ["address", "_to"]}}, {"hash": "0xf00d4b5d", "name": "changeOwner(address _from, address _to)", "color_name": "changeOwner(address \u001b[32m_from\u001b[0m, address \u001b[32m_to\u001b[0m)", "abi_name": "changeOwner(address,address)", "length": [220, 21453], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mchangeOwner(address \u001b[32m_from\u001b[0m, address \u001b[32m_to\u001b[0m)\u001b[95m payable\u001b[0m: \n  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m != 0:\n      if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m:\n          if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n              stop\n          else:\n              \u001b[38;5;8mlog Confirmation(\u001b[0m\n              \u001b[38;5;8m      address owner=caller,\u001b[0m\n              \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n              if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                  stop\n              else:\n                  require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                  \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                  if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m <= \u001b[0m0:\n                      if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m:\n                          \u001b[94midx\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 264\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                              \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m, 264) + 2\n                              \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2)\n                              \u001b[32mwhile \u001b[0msha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32)\u001b[1m > \u001b[0m\u001b[94ms\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor[\u001b[0m\u001b[94ms\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32) + 1\n                              \u001b[32mcontinue \u001b[0m\n                          \u001b[94midx\u001b[0m = 0\n                          \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = 260\n                              if not \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m:\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              else:\n                                  require \u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\n                                  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 259\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m = 0\n                          \u001b[94midx\u001b[0m = code.data[3859 len 32]\n                          \u001b[32mwhile \u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                              \u001b[32mstor[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                              \u001b[32mcontinue \u001b[0m\n                          require \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m < \u001b[0m256\n                          \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = \u001b[32m_to\u001b[0m\n                          Mask(96, 0, \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_160\u001b[0m) = 0\n                          \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m = 0\n                          \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_to\u001b[0m\u001b[32m]\u001b[0m = \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\n                          \u001b[38;5;8mlog OwnerChanged(\u001b[0m\n                          \u001b[38;5;8m      address oldOwner=addr(_from),\u001b[0m\n                          \u001b[38;5;8m      address newOwner=_to)\u001b[0m\n                          stop\n                      else:\n                          stop\n                  else:\n                      stop\n      else:\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = \u001b[32mm_required\u001b[0m\n          \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n          \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m++\n          if not \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1:\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m <= \u001b[0m0:\n                          if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m:\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 264\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m, 264) + 2\n                                  \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2)\n                                  \u001b[32mwhile \u001b[0msha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32)\u001b[1m > \u001b[0m\u001b[94ms\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor[\u001b[0m\u001b[94ms\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32) + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = 260\n                                  if not \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m:\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  else:\n                                      require \u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\n                                      \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 259\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                              \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = code.data[3859 len 32]\n                              \u001b[32mwhile \u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              require \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m < \u001b[0m256\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = \u001b[32m_to\u001b[0m\n                              Mask(96, 0, \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_160\u001b[0m) = 0\n                              \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_to\u001b[0m\u001b[32m]\u001b[0m = \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\n                              \u001b[38;5;8mlog OwnerChanged(\u001b[0m\n                              \u001b[38;5;8m      address oldOwner=addr(_from),\u001b[0m\n                              \u001b[38;5;8m      address newOwner=_to)\u001b[0m\n                              stop\n                          else:\n                              stop\n                      else:\n                          stop\n          else:\n              \u001b[94midx\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m + 1\n              \u001b[32mwhile \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                  \u001b[32mstor260\u001b[0m\u001b[32m[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                  \u001b[32mcontinue \u001b[0m\n              \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              require \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n              \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m]\u001b[0m = sha3(call.data[0 len calldata.size])\n              if 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m and \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m != 0:\n                  stop\n              else:\n                  \u001b[38;5;8mlog Confirmation(\u001b[0m\n                  \u001b[38;5;8m      address owner=caller,\u001b[0m\n                  \u001b[38;5;8m      bytes32 operation=sha3(call.data[0 len calldata.size]))\u001b[0m\n                  if \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[1m > \u001b[0m1:\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m--\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 2^\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0mcaller\u001b[32m]\u001b[0m\u001b[1m or \u001b[0m\u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m\n                      stop\n                  else:\n                      require \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                      \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m\u001b[32m]\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0mcall.data[0 len calldata.size]\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                      if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_to\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m <= \u001b[0m0:\n                          if \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m:\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 264\n                                  \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                  \u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m, 264) + 2\n                                  \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2)\n                                  \u001b[32mwhile \u001b[0msha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32)\u001b[1m > \u001b[0m\u001b[94ms\u001b[0m\u001b[32m:\u001b[0m\n                                      \u001b[32mstor[\u001b[0m\u001b[94ms\u001b[0m\u001b[32m]\u001b[0m = 0\n                                      \u001b[94ms\u001b[0m = \u001b[94ms\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  \u001b[94ms\u001b[0m = sha3(sha3(\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m, 264) + 2) + (\u001b[32mstor264\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94ms\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m + 31\u001b[1m / \u001b[0m32) + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              \u001b[94midx\u001b[0m = 0\n                              \u001b[32mwhile \u001b[0m\u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = 260\n                                  if not \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m:\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                                  else:\n                                      require \u001b[94midx\u001b[0m\u001b[1m < \u001b[0m\u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\n                                      \u001b[95mmem[\u001b[0m0\u001b[95m]\u001b[0m = \u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\n                                      \u001b[95mmem[\u001b[0m32\u001b[95m]\u001b[0m = 259\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_256\u001b[0m = 0\n                                      \u001b[32mstor259\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor[\u001b[0mcode.data[3859 len 32] + \u001b[94midx\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_512\u001b[0m = 0\n                                      \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                      \u001b[32mcontinue \u001b[0m\n                              \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m = 0\n                              \u001b[94midx\u001b[0m = code.data[3859 len 32]\n                              \u001b[32mwhile \u001b[0mcode.data[3859 len 32] + \u001b[32mstor260\u001b[0m\u001b[32m.length\u001b[0m\u001b[1m > \u001b[0m\u001b[94midx\u001b[0m\u001b[32m:\u001b[0m\n                                  \u001b[32mstor[\u001b[0m\u001b[94midx\u001b[0m\u001b[32m]\u001b[0m = 0\n                                  \u001b[94midx\u001b[0m = \u001b[94midx\u001b[0m + 1\n                                  \u001b[32mcontinue \u001b[0m\n                              require \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[1m < \u001b[0m256\n                              \u001b[38;5;8maddr(\u001b[0m\u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_0\u001b[0m\u001b[38;5;8m)\u001b[0m = \u001b[32m_to\u001b[0m\n                              Mask(96, 0, \u001b[32mstor2\u001b[0m\u001b[32m[\u001b[0m\u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\u001b[32m]\u001b[0m\u001b[32m.field_160\u001b[0m) = 0\n                              \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m = 0\n                              \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[32m_to\u001b[0m\u001b[32m]\u001b[0m = \u001b[32mstor258\u001b[0m\u001b[32m[\u001b[0m\u001b[38;5;8maddr(\u001b[0m\u001b[32m_from\u001b[0m\u001b[38;5;8m)\u001b[0m\u001b[32m]\u001b[0m\n                              \u001b[38;5;8mlog OwnerChanged(\u001b[0m\n                              \u001b[38;5;8m      address oldOwner=addr(_from),\u001b[0m\n                              \u001b[38;5;8m      address newOwner=_to)\u001b[0m\n                              stop\n                          else:\n                              stop\n                      else:\n                          stop\n  else:\n      stop", "trace": [["if", ["iszero", ["eq", 0, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]]], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], [["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["if", ["le", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_to"]], ["loc", 258]]], 0], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]]]], [["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 32, 32], 264], ["store", 160, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["setmem", ["range", 0, 32], ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], 264]]]], ["while", ["gt", ["add", ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]], ["var", 1]], [["store", 256, 0, ["var", 1], 0], ["continue", "id8356", [["setvar", 1, ["add", 1, ["var", 1]]]]]], "id8356", [["setvar", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]]]]], ["continue", "id5711", [["setvar", 1, ["add", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]]]]]], "id5711", [["setvar", 0, 0]]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 0, 32], 260], ["if", ["iszero", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], [["continue", "id5647", [["setvar", 0, ["add", 1, ["var", 0]]]]]], [["if", ["ge", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["setmem", ["range", 0, 32], ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], ["setmem", ["range", 32, 32], 259], ["store", 256, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["continue", "id5647", [["setvar", 0, ["add", 1, ["var", 0]]]]]]]]]], "id5647", [["setvar", 0, 0]]], ["store", 256, 0, ["length", ["loc", 260]], 0], ["while", ["gt", ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["var", 0]], [["store", 256, 0, ["var", 0], 0], ["continue", "id2447", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id2447", [["setvar", 0, ["code.data", 3859, 32]]]], ["if", ["ge", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], 256], [["invalid", "jump"]], [["store", 160, 0, ["array", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], ["loc", 2]], ["param", "_to"]], ["store", 96, 160, ["array", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], ["loc", 2]], 0], ["store", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]], 0], ["store", 256, 0, ["map", ["param", "_to"], ["loc", 258]], ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]]], ["log", ["data", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["param", "_to"]], 81957017855651259147862513865086678077079724301374147204828617105588521080220], ["stop"]]]], [["stop"]]]], [["stop"]]]]]]]]]], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["name", "m_required", 0]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 0, ["length", ["loc", 260]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], ["if", ["gt", ["iszero", ["stor", 256, 0, ["length", ["loc", 260]]]], ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]], [["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["if", ["le", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_to"]], ["loc", 258]]], 0], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]]]], [["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 32, 32], 264], ["store", 160, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["setmem", ["range", 0, 32], ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], 264]]]], ["while", ["gt", ["add", ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]], ["var", 1]], [["store", 256, 0, ["var", 1], 0], ["continue", "id8356", [["setvar", 1, ["add", 1, ["var", 1]]]]]], "id8356", [["setvar", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]]]]], ["continue", "id5711", [["setvar", 1, ["add", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]]]]]], "id5711", [["setvar", 0, 0]]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 0, 32], 260], ["if", ["iszero", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], [["continue", "id5647", [["setvar", 0, ["add", 1, ["var", 0]]]]]], [["if", ["ge", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["setmem", ["range", 0, 32], ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], ["setmem", ["range", 32, 32], 259], ["store", 256, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["continue", "id5647", [["setvar", 0, ["add", 1, ["var", 0]]]]]]]]]], "id5647", [["setvar", 0, 0]]], ["store", 256, 0, ["length", ["loc", 260]], 0], ["while", ["gt", ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["var", 0]], [["store", 256, 0, ["var", 0], 0], ["continue", "id2447", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id2447", [["setvar", 0, ["code.data", 3859, 32]]]], ["if", ["ge", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], 256], [["invalid", "jump"]], [["store", 160, 0, ["array", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], ["loc", 2]], ["param", "_to"]], ["store", 96, 160, ["array", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], ["loc", 2]], 0], ["store", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]], 0], ["store", 256, 0, ["map", ["param", "_to"], ["loc", 258]], ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]]], ["log", ["data", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["param", "_to"]], 81957017855651259147862513865086678077079724301374147204828617105588521080220], ["stop"]]]], [["stop"]]]], [["stop"]]]]]]]]]]]], [["while", ["gt", ["stor", 256, 0, ["length", ["loc", 260]]], ["var", 0]], [["store", 256, 0, ["array", ["var", 0], ["loc", 260]], 0], ["continue", "id1932", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id1932", [["setvar", 0, ["add", 1, ["stor", 256, 0, ["length", ["loc", 260]]]]]]], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["stor", 256, 0, ["length", ["loc", 260]]]], ["if", ["ge", ["stor", 256, 0, ["length", ["loc", 260]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["sha3", ["call.data", 0, "calldatasize"]]], ["if", ["iszero", ["eq", 0, ["and", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]]], [["stop"]], [["log", ["data", "caller", ["sha3", ["call.data", 0, "calldatasize"]]], 102118775725911484345497442029950132913745145404653599129706589983305057283802], ["if", ["gt", ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], 1], [["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["add", -1, ["stor", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], ["or", ["exp", 2, ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, "caller"], ["loc", 258]]]], ["stor", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]]], ["stop"]], [["if", ["ge", ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["store", 256, 0, ["add", ["code.data", 3859, 32], ["stor", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]]]], 0], ["store", 256, 0, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["data", ["call.data", 0, "calldatasize"]], ["loc", 259]], 0], ["if", ["le", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_to"]], ["loc", 258]]], 0], [["if", ["iszero", ["iszero", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]]]], [["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 32, 32], 264], ["store", 160, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 264]], 0], ["setmem", ["range", 0, 32], ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], 264]]]], ["while", ["gt", ["add", ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]], ["var", 1]], [["store", 256, 0, ["var", 1], 0], ["continue", "id8356", [["setvar", 1, ["add", 1, ["var", 1]]]]]], "id8356", [["setvar", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]]]]], ["continue", "id5711", [["setvar", 1, ["add", 1, ["sha3", ["add", 2, ["sha3", ["data", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], 264]]]], ["mask_shl", 251, 5, -5, ["add", 31, ["stor", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 1]]], ["loc", 264]]]]]]]]]], "id5711", [["setvar", 0, 0]]], ["while", ["lt", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["setmem", ["range", 0, 32], 260], ["if", ["iszero", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], [["continue", "id5647", [["setvar", 0, ["add", 1, ["var", 0]]]]]], [["if", ["ge", ["var", 0], ["stor", 256, 0, ["length", ["loc", 260]]]], [["invalid", "jump"]], [["setmem", ["range", 0, 32], ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]]], ["setmem", ["range", 32, 32], 259], ["store", 256, 0, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 256, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["store", 256, 512, ["map", ["stor", 256, 0, ["add", ["code.data", 3859, 32], ["var", 0]]], ["loc", 259]], 0], ["continue", "id5647", [["setvar", 0, ["add", 1, ["var", 0]]]]]]]]]], "id5647", [["setvar", 0, 0]]], ["store", 256, 0, ["length", ["loc", 260]], 0], ["while", ["gt", ["add", ["code.data", 3859, 32], ["stor", 256, 0, ["length", ["loc", 260]]]], ["var", 0]], [["store", 256, 0, ["var", 0], 0], ["continue", "id2447", [["setvar", 0, ["add", 1, ["var", 0]]]]]], "id2447", [["setvar", 0, ["code.data", 3859, 32]]]], ["if", ["ge", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], 256], [["invalid", "jump"]], [["store", 160, 0, ["array", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], ["loc", 2]], ["param", "_to"]], ["store", 96, 160, ["array", ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]], ["loc", 2]], 0], ["store", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]], 0], ["store", 256, 0, ["map", ["param", "_to"], ["loc", 258]], ["stor", 256, 0, ["map", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["loc", 258]]]], ["log", ["data", ["mask_shl", 160, 0, 96, ["param", "_from"]], ["param", "_to"]], 81957017855651259147862513865086678077079724301374147204828617105588521080220], ["stop"]]]], [["stop"]]]], [["stop"]]]]]]]]]]]]]]]], [["stop"]]]], "params": {"4": ["address", "_from"], "36": ["address", "_to"]}}, {"hash": "0xf1736d86", "name": "m_dailyLimit()", "color_name": "m_dailyLimit()", "abi_name": "m_dailyLimit()", "length": [2, 77], "getter": ["storage", 256, 0, 261], "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0mm_dailyLimit()\u001b[95m payable\u001b[0m: \n  return \u001b[32mm_dailyLimit\u001b[0m", "trace": [["return", ["stor", 256, 0, ["name", "m_dailyLimit", 261]]]], "params": {}}, {"hash": "_fallback()", "name": "_fallback()", "color_name": "_fallback()", "abi_name": null, "length": [5, 234], "getter": null, "const": null, "payable": true, "print": "\u001b[95mdef \u001b[0m_fallback()\u001b[95m payable\u001b[0m: \u001b[38;5;8m# default function\u001b[0m\n  if call.value\u001b[1m > \u001b[0m0:\n      \u001b[38;5;8mlog Deposit(\u001b[0m\n      \u001b[38;5;8m      address sender=caller,\u001b[0m\n      \u001b[38;5;8m      uint256 value=call.value)\u001b[0m", "trace": [["if", ["le", "callvalue", 0], [["stop"]], [["log", ["data", "caller", "callvalue"], 102222681472383059465863322013072701928378550215632170212813623808969952268444], ["stop"]]]], "params": {}}]}